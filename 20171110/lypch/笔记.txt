模块化：
1.sea、require       民间－－野路子
  CMD、AMD的区别

  模块.js         define      /require/exports/module
  前台.html       use
2.node.js       参考了CMD规范，但是模块化还是语言自身提供
  require/exports/module

  node_modules  ./

3.ES6           官方
  export/import

--------------------------------------------------------------------------------

babel--ES6 编译模块
WebPack--一站式的开发

--------------------------------------------------------------------------------

数据交互
1.http协议
2.form
3.ajax--官方、不能跨域     aaa.com－>bbb.com，从自己的网站读取其他网站的数据
4.jsonp--民间、跨域       不推荐
5.websocket--双向、

--------------------------------------------------------------------------------

http协议－－协议？＝双方的约定，浏览器和服务器如何通讯
https://tools.ietf.org/html/rfc2616

1.无状态协议
2.链接过程：链接、接受、请求啥－－三次握手
3.Request、Respose都是消息，消息都是连部分组成：Head和Body；Head最大32K；Body最大2G，但是服务器的设定导致最多只能是1G。
  Head存放信息，Body存放数据。

--------------------------------------------------------------------------------
http缓存
1.野路子－随机数
2.官方－3个头
--------------------------------------------------------------------------------

http和https

--------------------------------------------------------------------------------

http 1.0        短链接
http 1.1        长链接－keep alive
http 2.0

--------------------------------------------------------------------------------

form最重要
1.action--提交到什么地方
2.method--GET/POST/PUT/DELETE/HEAD
  GET       把数据放在URL中传输     数据量很小、缓存
  POST      把数据放在body中传输    数据量大、不会缓存

  GET        获取东西
  POST、PUT  发送东西、大量发送
  DELETE     删除东西
  HEAD       让服务器只发送头回来即可（不需要内容）

3.name－－名字

4.enctype
  application/x-www-form-urlencoded  名字＝值&名字＝值          默认值只适合发送小数据
  multipart/form-data                分块                     文件上传
  text/plain

--------------------------------------------------------------------------------
ajax原理，jsonp原理
WebPack

ajax原理－－XMLHttpRequest

1.ajax好：用户体验好、性能高
  后台

  XMLHttpRequest.readystate
  0:        创建
  1:        链接到服务器
  2:        请求已经发送
  3:        接收完成（头）
  4:        接收完成（体）

  https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin
  XMLHttpRequest.status--状态码
  1xx：  表示消息
  2xx：  成功
  3xx：  重定向
  4xx：  请求错误（请求了不存在的资源）
  5xx：  服务端错误
  6xx：  自定义

    ▪ 301 Moved Permanently     永久重定向
    ▪ 302 Move temporarily      临时重定向
    ▪ 304 Not Modified          缓存
        第一次请求后，服务器返回的数据中包含了内容及Expires
        第二次请求时同时发送一个日期（第一次得到的时间），返回304且无内容（没过期），或者200有内容（已过期重新发送）

    成功：200，304

  xhr.responseText  文本
  xhr.responseXML   XML格式

  JSON
  JSON.stringify  {a:12,b:5} =>   "{a:12,b:5}"
  JSON.parse      {a:12,b:5} <=   "{a:12,b:5}"
  JSON的唯一的问题就是不兼容，低版本的浏览器不支持JSON
--------------------------------------------------------------------------------

安全：
1.前台没有安全性，所有的安全都由后台来实现（注入）；
2.XSS－－跨站脚本攻击

AJAX不允许跨域－－防止XSS

jsonp——不要用
WebSocket——双工、跨域
ajax上传文件


--------------------------------------------------------------------------------
json标准格式：
1.key必须用引号包起来
2.双引号

{"a": 12, "name": 'blue'}

沙箱机制——隔离出来虚假系统
c的数组和js的数组有啥区别
c数组——空间       没有结尾、没有长度、没有操作；定长
JS数组——对象      相关操作；变长

链表和数组
链表：变长，可以随意扩展——O(1)，不擅长索引O(n)
数组：定长，不擅长扩展——O(n)，擅长索引O(1)
--------------------------------------------------------------------------------
